{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: Current File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                // "--skip_existing",
                // "--no_workers", "1",
            ]
        },
        {
            "name": "filter_pdb_train_mmcifs.py",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/filter_pdb_train_mmcifs.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--mmcif_assembly_dir", "data/pdb_data/unfiltered_assembly_dev_mmcifs",
                "--mmcif_asym_dir", "data/pdb_data/unfiltered_asym_dev_mmcifs",
                "--output_dir", "data/pdb_data/dev_train_mmcifs",
                // "--min_cutoff_date", "1971-01-01",
                // "--max_cutoff_date", "2021-09-30",
                // "--skip_existing",
                // "--split", "eval",
                "--no_workers", "1",
            ]
        },
        {
            "name": "filter_pdb_val_mmcifs.py",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/filter_pdb_val_mmcifs.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--mmcif_assembly_dir", "data/pdb_data/unfiltered_assembly_dev_mmcifs",
                "--mmcif_asym_dir", "data/pdb_data/unfiltered_asym_dev_mmcifs",
                "--output_dir", "data/pdb_data/dev_val_mmcifs",
                // "--min_cutoff_date", "2021-10-01",
                // "--max_cutoff_date", "2023-01-13",
                // "--skip_existing",
                // "--split", "eval",
                "--no_workers", "1",
            ]
        },
        {
            "name": "cluster_pdb_train_mmcifs.py",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/cluster_pdb_train_mmcifs.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--mmcif_dir", "data/pdb_data/dev_train_mmcifs",
                // "--mmcif_dir", "data/pdb_data/train_mmcifs",
                "--output_dir", "data/pdb_data/data_caches/dev_train_clusterings",
                // "--output_dir", "data/pdb_data/data_caches/train_clusterings",
                "--clustering_filtered_pdb_dataset",
                // "--no_workers", "16",
                "--no_workers", "1",
            ]
        },
        {
            "name": "cluster_pdb_val_mmcifs.py",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/cluster_pdb_val_mmcifs.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                // "--mmcif_dir", "data/pdb_data/dev_val_mmcifs",
                "--mmcif_dir", "data/pdb_data/val_mmcifs",
                // "--output_dir", "data/pdb_data/data_caches/dev_val_clusterings",
                "--output_dir", "data/pdb_data/data_caches/val_clusterings",
                "--clustering_filtered_pdb_dataset",
                // "--max_num_tokens", "2048",
                // "--no_workers", "16",
                "--no_workers", "1",
            ]
        },
        {
            "name": "train.py",
            "type": "debugpy",
            "request": "launch",
            "program": "alphafold3_pytorch/train.py",
            "console": "integratedTerminal",
            "args": [
                "data=pdb",
                "data.batch_size=2",
                "data.train_val_test_split=[5, 5, 5]",
                "data.shuffle_train_val_test_subsets=True",
                "experiment=alphafold3_initial_training",
                "logger=csv",
                "model=alphafold3",
                "+model.net.dim_pairwise=8",
                "+model.net.dim_single=8",
                "+model.net.dim_token=8",
                "+model.net.confidence_head_kwargs={pairformer_depth: 1}",
                "+model.net.template_embedder_kwargs={pairformer_stack_depth: 1}",
                "+model.net.msa_module_kwargs={depth: 1, dim_msa: 8}",
                "+model.net.pairformer_stack={depth: 1, pair_bias_attn_dim_head: 4, pair_bias_attn_heads: 2}",
                "+model.net.diffusion_module_kwargs={atom_encoder_depth: 1, token_transformer_depth: 1, atom_decoder_depth: 1, atom_encoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 4}}, atom_decoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 4}}}",
                // "trainer=cpu",
                // "trainer.accumulate_grad_batches=2",
                // "+trainer.log_every_n_steps=1",
                // "trainer.max_steps=2",
            ]
        },
        {
            "name": "train.py: Overfitting Experiment",
            "type": "debugpy",
            "request": "launch",
            "program": "alphafold3_pytorch/train.py",
            "console": "integratedTerminal",
            "args": [
                "data=pdb",
                "data.batch_size=1",
                // "data.train_val_test_split=[5, 5, 5]",
                // "data.shuffle_train_val_test_subsets=False",
                // NOTE: This overfitting experiment configuration targets `209d-assembly1` and `721p-assembly1` only.
                "data.overfitting_train_examples=true",
                "data.sample_only_pdb_ids=[721p-assembly1]",
                "experiment=alphafold3_overfitting_experiment",
                "logger=wandb",
                "+logger.wandb.entity=bml-lab",
                "logger.wandb.group=alphafold3-overfitting-experiment",
                "+logger.wandb.name=AlphaFold3-61M-Overfitting-721p-BatchSize1-08212024",
                // "logger.wandb.id=3fgkwy5l",
                // "~logger",
                // "~logger.wandb",
                "model=alphafold3",
                // "model.is_fine_tuning=false",
                "model.num_samples_per_example=5",
                "model.visualize_val_samples_every_n_steps=1",
                // "+model.net.dim_pairwise=64",
                "+model.net.dim_pairwise=32",
                // "+model.net.dim_single=192",
                "+model.net.dim_single=96",
                // "+model.net.dim_token=384",
                "+model.net.dim_token=192",
                "+model.net.confidence_head_kwargs={pairformer_depth: 1}",
                "+model.net.template_embedder_kwargs={pairformer_stack_depth: 1}",
                "+model.net.msa_module_kwargs={depth: 1, dim_msa: 32}",
                "+model.net.pairformer_stack={depth: 10, pair_bias_attn_dim_head: 32, pair_bias_attn_heads: 8}",
                "+model.net.diffusion_module_kwargs={atom_encoder_depth: 2, atom_encoder_heads: 4, token_transformer_depth: 12, token_transformer_heads: 16, atom_decoder_depth: 2, atom_decoder_heads: 4, atom_encoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 16}}, atom_decoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 16}}}",
                // NOTE: The following trainer configuration will run a validation step every 50 training steps.
                "trainer.check_val_every_n_epoch=null",
                "+trainer.val_check_interval=50",
                // "trainer=cpu",
                // "trainer.accumulate_grad_batches=2",
                "+trainer.log_every_n_steps=1",
                // "trainer.max_steps=1",
            ]
        },
        {
            "name": "eval.py",
            "type": "debugpy",
            "request": "launch",
            "program": "alphafold3_pytorch/eval.py",
            "console": "integratedTerminal",
            "args": [
                "data=pdb",
                "data.batch_size=2",
                "data.train_val_test_split=[5, 5, 5]",
                "data.shuffle_train_val_test_subsets=True",
                "experiment=alphafold3_initial_training",
                "logger=csv",
                "model=alphafold3",
                "+model.net.dim_pairwise=8",
                "+model.net.dim_single=8",
                "+model.net.dim_token=8",
                "+model.net.confidence_head_kwargs={pairformer_depth: 1}",
                "+model.net.template_embedder_kwargs={pairformer_stack_depth: 1}",
                "+model.net.msa_module_kwargs={depth: 1, dim_msa: 8}",
                "+model.net.pairformer_stack={depth: 1, pair_bias_attn_dim_head: 4, pair_bias_attn_heads: 2}",
                "+model.net.diffusion_module_kwargs={atom_encoder_depth: 1, token_transformer_depth: 1, atom_decoder_depth: 1, atom_encoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 4}}, atom_decoder_kwargs: {attn_pair_bias_kwargs: {dim_head: 4}}}",
                // "trainer=cpu",
                // "trainer.accumulate_grad_batches=2",
                // "+trainer.log_every_n_steps=1",
                // "trainer.max_steps=2",
            ]
        }
    ]
}
